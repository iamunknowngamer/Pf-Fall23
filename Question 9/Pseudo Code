Procedure ascending(inwards, n):
    Initialize variables: rowmin = 0, rowmax = n-1, columnmin = 0, columnmax = n-1, increment = 1
    
    While increment <= n * n:
        For j from columnmin to columnmax:
            inwards[rowmin][j] = increment
            increment++

        rowmin++

        For i from rowmin to rowmax:
            inwards[i][columnmax] = increment
            increment++

        columnmax--

        For j from columnmax to columnmin:
            inwards[rowmax][j] = increment
            increment++

        rowmax--

        For i from rowmax to rowmin:
            inwards[i][columnmin] = increment
            increment++

        columnmin++

\\printing the inwars array

    For i from 0 to n-1:
        For j from 0 to n-1:
            Print inwards[i][j]
        Print newline

//end function of inwards

Procedure descending(outwards, n):
    Initialize variables: rowmin = 0, rowmax = n-1, columnmin = 0, columnmax = n-1, decrement = n*n

    While decrement > 0:
        For j from columnmax to columnmin:
            outwards[rowmin][j] = decrement
            decrement--

        rowmin++

        For i from rowmin to rowmax:
            outwards[i][columnmin] = decrement
            decrement--

        columnmin++

        For j from columnmin to columnmax:
            outwards[rowmax][j] = decrement
            decrement--

        rowmax--

        For i from rowmax to rowmin:
            outwards[i][columnmax] = decrement
            decrement--

        columnmax--

//prints the outwards array

    For i from 0 to n-1:
        For j from 0 to n-1:
            Print outwards[i][j]
        Print newline
//end function for outwars array

Procedure main():
    Set n = 5
    Declare inwards[100][100]
    Declare outwards[100][100]
    
    Call ascending(inwards, n)
    Call descending(outwards, n)
